import smartpy as sp

tstorage = sp.record(administrator = sp.address, ledger = sp.big_map(sp.pair(sp.address, sp.nat), sp.nat), metadata = sp.big_map(sp.string, sp.bytes), next_token_id = sp.nat, operators = sp.big_map(sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.unit), supply = sp.big_map(sp.nat, sp.nat), token_metadata = sp.big_map(sp.nat, sp.record(token_id = sp.nat, token_info = sp.map(sp.string, sp.bytes)).layout(("token_id", "token_info")))).layout(("administrator", ("ledger", ("metadata", ("next_token_id", ("operators", ("supply", "token_metadata")))))))
tparameter = sp.variant(balance_of = sp.record(callback = sp.contract(sp.list(sp.record(balance = sp.nat, request = sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id"))).layout(("request", "balance")))), requests = sp.list(sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")))).layout(("requests", "callback")), mint = sp.record(amount = sp.nat, to_ = sp.address, token = sp.variant(existing = sp.nat, new = sp.map(sp.string, sp.bytes)).layout(("existing", "new"))).layout(("amount", ("to_", "token"))), transfer = sp.list(sp.record(from_ = sp.address, txs = sp.list(sp.record(amount = sp.nat, to_ = sp.address, token_id = sp.nat).layout(("to_", ("token_id", "amount"))))).layout(("from_", "txs"))), update_operators = sp.list(sp.variant(add_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), remove_operator = sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id")))).layout(("add_operator", "remove_operator")))).layout((("balance_of", "mint"), ("transfer", "update_operators")))
tprivates = { }
tviews = { "all_tokens": ((), sp.list(sp.nat)), "get_balance": (sp.record(owner = sp.address, token_id = sp.nat).layout(("owner", "token_id")), sp.nat), "total_supply": (sp.record(token_id = sp.nat).layout("token_id"), sp.nat), "is_operator": (sp.record(operator = sp.address, owner = sp.address, token_id = sp.nat).layout(("owner", ("operator", "token_id"))), sp.bool) }
